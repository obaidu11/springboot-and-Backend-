pom.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.excelr</groupId>
    <artifactId>myspringboot</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>myspringboot</name>
    <description>Employee Management System with Spring Data JPA</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.1</version>  <!-- Use the latest stable version -->
        <relativePath/>
    </parent>

    <properties>
        <java.version>17</java.version>  <!-- Or your preferred Java version -->
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
-------------------------------------------------------------------------------
application.properties
------------------------
spring.datasource.url=jdbc:mysql://localhost:3306/employee_management
spring.datasource.username=root
spring.datasource.password=Obaid@123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
----------------------------------------------------------------------------
Main Application Class
----------------------
package com.excelr;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MyspringbootApplication {

    public static void main(String[] args) {
        SpringApplication.run(MyspringbootApplication.class, args);
    }
}
--------------------------------------------------------------------------------------------------
Employee.java (JPA Entity)
--------------------------
package com.excelr.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    private String department;
    private double salary;

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "Employee [id=" + id + ", name=" + name + ", department=" + department + ", salary=" + salary + "]";
    }
}
------------------------------------------------------------------------------------------------------------------------
EmployeeRepository.java (JPA Repository)
-----------------------------------------
package com.excelr.repository;

import com.excelr.entity.Employee;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Integer> {
}
-----------------------------------------------------------------------------------------------------
EmployeeService.java (Service Layer)
------------------------------------
package com.excelr.service;

import com.excelr.entity.Employee;
import com.excelr.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public void addEmployee(Employee employee) {
        try {
            employeeRepository.save(employee);
        } catch (DataAccessException e) {
            throw new RuntimeException("Error adding employee: " + e.getMessage());
        }
    }

    public void updateEmployee(int id, String name, String department, double salary) {
        try {
            Optional<Employee> optionalEmployee = employeeRepository.findById(id);
            if (optionalEmployee.isPresent()) {
                Employee employee = optionalEmployee.get();
                if (name != null) employee.setName(name);
                if (department != null) employee.setDepartment(department);
                if (salary > 0) employee.setSalary(salary);  // Simple validation
                employeeRepository.save(employee);
            } else {
                throw new RuntimeException("Employee not found with ID: " + id);
            }
        } catch (DataAccessException e) {
            throw new RuntimeException("Error updating employee: " + e.getMessage());
        }
    }

    public void deleteEmployee(int id) {
        try {
            if (employeeRepository.existsById(id)) {
                employeeRepository.deleteById(id);
            } else {
                throw new RuntimeException("Employee not found with ID: " + id);
            }
        } catch (DataAccessException e) {
            throw new RuntimeException("Error deleting employee: " + e.getMessage());
        }
    }

    public List<Employee> getAllEmployees() {
        try {
            return employeeRepository.findAll();
        } catch (DataAccessException e) {
            throw new RuntimeException("Error retrieving employees: " + e.getMessage());
        }
    }
}
------------------------------------------------------------------------------------------------
ConsoleRunner.java
------------------
package com.excelr.runner;

import com.excelr.entity.Employee;
import com.excelr.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Scanner;

@Component
public class ConsoleRunner implements CommandLineRunner {

    @Autowired
    private EmployeeService employeeService;

    @Override
    public void run(String... args) {
        Scanner scanner = new Scanner(System.in);
        boolean exit = false;

        while (!exit) {
            System.out.println("\nEmployee Management System");
            System.out.println("1. Add Employee");
            System.out.println("2. Update Employee");
            System.out.println("3. Delete Employee");
            System.out.println("4. Display All Employees");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    addEmployee(scanner);
                    break;
                case 2:
                    updateEmployee(scanner);
                    break;
                case 3:
                    deleteEmployee(scanner);
                    break;
                case 4:
                    displayAllEmployees();
                    break;
                case 5:
                    exit = true;
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
        scanner.close();
    }

    private void addEmployee(Scanner scanner) {
        try {
            Employee employee = new Employee();
            System.out.print("Enter name: ");
            employee.setName(scanner.nextLine());
            System.out.print("Enter department: ");
            employee.setDepartment(scanner.nextLine());
            System.out.print("Enter salary: ");
            employee.setSalary(scanner.nextDouble());
            employeeService.addEmployee(employee);
            System.out.println("Employee added successfully.");
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void updateEmployee(Scanner scanner) {
        try {
            System.out.print("Enter employee ID to update: ");
            int id = scanner.nextInt();
            scanner.nextLine();  // Consume newline
            System.out.print("Enter new name (or press Enter to skip): ");
            String name = scanner.nextLine();
            System.out.print("Enter new department (or press Enter to skip): ");
            String department = scanner.nextLine();
            System.out.print("Enter new salary (or 0 to skip): ");
            double salary = scanner.nextDouble();
            employeeService.updateEmployee(id, name.isEmpty() ? null : name, department.isEmpty() ? null : department, salary);
            System.out.println("Employee updated successfully.");
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void deleteEmployee(Scanner scanner) {
        try {
            System.out.print("Enter employee ID to delete: ");
            int id = scanner.nextInt();
            employeeService.deleteEmployee(id);
            System.out.println("Employee deleted successfully.");
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void displayAllEmployees() {
        try {
            List<Employee> employees = employeeService.getAllEmployees();
            if (employees.isEmpty()) {
                System.out.println("No employees found.");
            } else {
                System.out.println("Employees:");
                for (Employee emp : employees) {
                    System.out.println(emp);
                }
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}